/*
  Buttercup compiler - Common Intermediate Language (CIL) code generator.
  Copyright (C) 2013 Ariel Ortiz, ITESM CEM
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Text;
using System.Collections.Generic;

namespace DeepLingo
{

    class CILGenerator
    {

        SymbolTable functionsTable;
        SymbolTable globalVariables;
        int loopCounter = 0;
        int labelCounter = 0;

        //-----------------------------------------------------------
        string GenerateLabel()
        {
            return String.Format("${0:000000}", labelCounter++);
        }

        //-----------------------------------------------------------
        public CILGenerator(SymbolTable functionsTable, SymbolTable globalVariables)
        {
            this.functionsTable = functionsTable;
            this.globalVariables = globalVariables;
        }
        public string VisitChildren(Node node){
            var sb = new StringBuilder();
            foreach (var n in node) {
                sb.Append(Visit((dynamic) n));
            }
            return sb.ToString();
        }
        public string Visit(Prog node){
            return "// Code generated by the deeplingo compiler.\n\n" 
                + ".assembly 'deeplingo' {}\n\n"
                + ".assembly extern 'deeplingolib' {}\n\n"
                + ".class public 'DeepLingoProgram' extends " 
                //+ Visit((dynamic) node[0]) // aqui se declaran vars globales
                + "['mscorlib']'System'.'Object' {\n" 
                //+ "\t.method public static void 'start'() {\n"  // renombrar en cada FunDef
                //+ "\t\t.entrypoint\n" //colocar al encontrar el main
                + Visit((dynamic) node[1])
                + "\t\tret\n"
                + "\t}\n"
                + "}\n";
        }
        public string Visit(GlobalVarDef node){
            var sb = new StringBuilder();
            foreach (var entry in globalVariables) {
                sb.Append(String.Format(
                              "\t\t.locals init (int32 '{0}')\n",                              
                              entry.Key)
                          );
            }
            return sb.ToString();
        }
        public string Visit(VarDef node){
            return  "\t.local init("
                    +Visit((dynamic)node[0])
                    +")\n";
        }
        public string Visit(VarList node){
            return VisitChildren((dynamic)node);
        }
        public string Visit(FunList node){
            return VisitChildren((dynamic)node);
        }
        public string Visit(FunDef node){
            var functionName = node.AnchorToken.Lexeme;
            var entry = "";
            var params = "";
            var sb = new StringBuilder();
            sb.Append("\t.method public static void '{0}'(", functionName);
            if (functionName == "main")
                entry = ".entrypoint\n";
            foreach (var n in node){
                if (n.GetType() == typeof(IdList)){
                    sb.Append(Visit((IdList)n));
                    sb.Append(") {\n\t{0}",entry);
                }else{
                    sb.Append("\t{0}", Visit((dynamic)n)); 
                }
            }
            sb.Append("\t}\n");
            return sb.ToString();
        }
        public string Visit(IdList node){
            var sb = new StringBuilder();
            foreach (var n in node){
                sb.Append("int32 ");
                sb.Append("'{0}', ",Visit(dynamic)n);
            }
            return sb.ToString().TrimEnd(new Char[]{',',' '});
        }
        public string Visit(Identifier node){
            return "\t\tldloc '"
                    + node.AnchorToken.Lexeme 
                    + "'\n";
        }

        public string Visit(StmtList node){
            VisitChildren((dynamic)node);
        }
        public string Visit(If node){
            Console.WriteLine("If");
            ifCounter++;
            foreach (var n in node){
                if (n.GetType() == typeof(Identifier)){
                    varExistsInTables((Identifier)n);
                }
                else{
                    Visit((dynamic)n);
                }
            }
            ifCounter--;
        }
        public string Visit(Else node){
            Console.WriteLine("Else");
            if(ifCounter>0){
                foreach (var n in node)
                {
                    if (n.GetType() == typeof(Identifier))
                    {
                        varExistsInTables((dynamic)n);
                    }
                    else
                    {
                        Visit((dynamic)n);
                    }
                }
            }
        }
        public string Visit(ElseIf node)
        {
            Console.WriteLine("ElseIf");
            if (ifCounter > 0)
            {
                foreach (var n in node)
                {
                    if (n.GetType() == typeof(Identifier))
                    {
                        varExistsInTables((dynamic)n);
                    }
                    else
                    {
                        Visit((dynamic)n);
                    }
                }
            }
        }
        public string Visit(ElseIfList node){
            return VisitChildren((dynamic)node);
        }
        public string Visit(Equals node){
            return  Visit((dynamic)node[0])
                    + Visit((dynamic)node[1])
                    + "ceq\n";
            
        }
        public string Visit(Not_Equals node){
            return  Visit((dynamic)node[0])
                    + Visit((dynamic)node[1])
                    + "ceq\nnot\n";
        }
        public string Visit(Gt node)
        {
            return  Visit((dynamic)node[0])
                    + Visit((dynamic)node[1])
                    + "cgt\n";
        }
        public string Visit(Goet node)
        {
            return  Visit((dynamic)node[1])
                    + Visit((dynamic)node[0])
                    + "clt\n";
        }
        public string Visit(Lt node)
        {
            return  Visit((dynamic)node[0])
                    + Visit((dynamic)node[1])
                    + "clt\n";
        }
        public string Visit(Loet node)
        {
            return  Visit((dynamic)node[1])
                    + Visit((dynamic)node[0])
                    + "cgt\n";
        }
        public string Visit(Or node){
            Console.WriteLine("Or ");
            foreach (var n in node)
            {
                if (n.GetType() == typeof(Identifier))
                {
                    varExistsInTables((dynamic)n);
                }
                else
                {
                    Visit((dynamic)n);
                }
            }
        }
        public string Visit(And node)
        {
            Console.WriteLine("And ");
            foreach (var n in node)
            {
                if (n.GetType() == typeof(Identifier))
                {
                    varExistsInTables((dynamic)n);
                }
                else
                {
                    Visit((dynamic)n);
                }
            }
        }
        public string Visit(Assignment node){
            Console.WriteLine("Assignment");
            foreach (var n in node)
            {
                if (n.GetType() == typeof(Identifier))
                {
                    varExistsInTables((dynamic)n);
                }
                else
                {
                    Visit((dynamic)n);
                }
            }
        }
        public string Visit(Sum node){
            Console.WriteLine("Sum");
            foreach (var n in node)
            {
                if (n.GetType() == typeof(Identifier))
                {
                    varExistsInTables((dynamic)n);
                }
                else
                {
                    Visit((dynamic)n);
                }
            }
        }
        public string Visit(Mul node){
            Console.WriteLine("Mul");
            foreach (var n in node)
            {
                if (n.GetType() == typeof(Identifier))
                {
                    varExistsInTables((dynamic)n);
                }
                else
                {
                    Visit((dynamic)n);
                }
            }
        }
        public string Visit(Sub node){
            Console.WriteLine("Sub");
            foreach (var n in node)
            {
                if (n.GetType() == typeof(Identifier))
                {
                    varExistsInTables((dynamic)n);
                }
                else
                {
                    Visit((dynamic)n);
                }
            }
        }
        public string Visit(Div node){
            Console.WriteLine("Div");
            foreach (var n in node)
            {
                if (n.GetType() == typeof(Identifier))
                {
                    varExistsInTables((dynamic)n);
                }
                else
                {
                    Visit((dynamic)n);
                }
            }
        }
        public string Visit(Mod node)
        {
            Console.WriteLine("Mod");
            foreach (var n in node)
            {
                if (n.GetType() == typeof(Identifier))
                {
                    varExistsInTables((dynamic)n);
                }
                else
                {
                    Visit((dynamic)n);
                }
            }
        }
        public string Visit(VarChar node){
            Console.WriteLine("VarChar");
        }
        public string Visit(VarString node){
            Console.WriteLine("VarString");
        }
        public string Visit(VarInt node){
            Console.WriteLine("VarInt");
            string inputString = node.AnchorToken.Lexeme;
            int numValue;
            bool parsed = Int32.TryParse(inputString, out numValue);

            if (!parsed)
                throw new SemanticError("Int32. could not parse "+inputString+" to an int.", node.AnchorToken);
        }
        public string Visit(Array node){
            Console.WriteLine("Array");
            VisitChildren((dynamic)node);
        }
        public string Visit(Loop node){
            Console.WriteLine("Loop");
            loopCounter++;
            VisitChildren((dynamic)node);
            loopCounter--;
        }
        public string Visit(FunCall node){
            Console.WriteLine("FunCall");
            var funName = node.AnchorToken.Lexeme;
            if(!functionsTable.Contains(funName)){
                throw new SemanticError("Function: "+funName+"does not exist", node.AnchorToken);
            }else{
                int arity = 0;
                foreach (var n in node){
                    arity++;
                    Console.WriteLine("Node: "+n.AnchorToken.Lexeme);
                    if (n.GetType() == typeof(Identifier)){
                        varExistsInTables((Identifier)n);
                    }
                    else{
                        Visit((dynamic)n);
                    }
                }
                if(arity!=functionsTable[funName]){
                    throw new SemanticError("Function: " + funName + "wrong arity of parameters", node.AnchorToken);
                }
            }
        }
        public string Visit(Break node){
            if(loopCounter>0){
                Console.WriteLine("Break");
            }else{
                throw new SemanticError("Break statements not in loop",node.AnchorToken);
            }
            
        }
        public string Visit(Increment node){
            Console.WriteLine("Increment");
            varExistsInTables((dynamic)node[0]);
        }
        public string Visit(Decrement node){
            Console.WriteLine("Decrement");
            varExistsInTables((dynamic)node[0]);
        }
        public string Visit(True node){
            Console.WriteLine("True");
        }
        public string Visit(Return node){
            Console.WriteLine("Return");
            //poner loocounter si hay return;
        }
        public string Visit(Not node){
            if (node[0].GetType() == typeof(Identifier)){
                varExistsInTables((Identifier)node[0]);
            }
            else{
                Visit((dynamic)node[0]);
            }
        }
        public string Visit(Stmt node){
            VisitChildren((dynamic)node);
        }
    }
}