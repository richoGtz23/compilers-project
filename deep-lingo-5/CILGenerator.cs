/*
Luis Ricardo Gutierrez A01376121
Josep Romagosa A01374637
 */

using System;
using System.Text;
using System.Collections.Generic;

namespace DeepLingo{
    class CILGenerator{
        SymbolTable globalVariables;
        SymbolTable tempTable;
        SymbolTable systemFunctions;
        FunctionTable param;
        int loopCounter = 0;
        int labelCounter = 0;
        bool insideFunction = false;
        string endIfLabel = "";
        string oldLoop = "";
        string curLoop = "";

        //-----------------------------------------------------------
        String GenerateLabel(){
            return String.Format("${0:000000}", labelCounter++);
        }
        static readonly IDictionary<string, int> encodings = new Dictionary<string, int>() {
            { "\\n", 10},
            { "\\r", 13},
            { "\\t", 9},
            { "\\", 92},
            { "\\'", 39},
            { "\\\"", 34},
        };
        public void APIFuncitons(){
            systemFunctions.Add("printi");
            systemFunctions.Add("printc");
            systemFunctions.Add("prints");
            systemFunctions.Add("println");
            systemFunctions.Add("readi");
            systemFunctions.Add("reads");
            systemFunctions.Add("new");
            systemFunctions.Add("size");
            systemFunctions.Add("add");
            systemFunctions.Add("get");
            systemFunctions.Add("set");
            systemFunctions.Add("pow");
        }

        //-----------------------------------------------------------
        public CILGenerator(){
            globalVariables = new SymbolTable();
            systemFunctions = new SymbolTable();
            tempTable = new SymbolTable();
            APIFuncitons();

        }
        public String VisitChildren(Node node){
            Console.WriteLine(node.GetType());
            var sb = new StringBuilder();
            foreach (var n in node) {
                sb.Append(Visit((dynamic) n));
            }
            return sb.ToString();
        }
        public String Visit(Prog node){
            Console.WriteLine(node.GetType());
            return "// Code generated by the deeplingo compiler.\n\n" 
                + ".assembly 'deeplingo' {}\n\n"
                + ".assembly extern 'deeplingolib' {}\n\n"
                + ".class public 'DeepLingoProgram' extends " 
                //+ Visit((dynamic) node[0]) // aqui se declaran vars globales
                + "['mscorlib']'System'.'Object' {\n" 
                //+ "\t.method public static void 'start'() {\n"  // renombrar en cada FunDef
                //+ "\t\t.entrypoint\n" //colocar al encontrar el main
                + VisitChildren((dynamic) node)
                //+ "\t\tret\n"
                //+ "\t}\n"
                + "}\n";
        }
        public String Visit(VarDef node){
            Console.WriteLine(node.GetType());
            var sb = new StringBuilder();
                foreach (var n in node[0]){
                    var variableName = n.AnchorToken.Lexeme;
                    if (insideFunction){
                        sb.Append(".locals init (int32 '"+variableName+"')\n");
                        tempTable.Add(variableName);
                    }else{
                        sb.Append(".field public static int32 '"+variableName+"'\n");
                        globalVariables.Add(variableName);
                    }
                }
            return sb.ToString();
        }
        public String Visit(VarList node){
            Console.WriteLine(node.GetType());
            return VisitChildren((dynamic)node);
        }
        public String Visit(FunList node){
            Console.WriteLine(node.GetType());
            return VisitChildren((dynamic)node);
        }
        public String Visit(ExpressionList node){
            Console.WriteLine(node.GetType());
            return VisitChildren(node);
        }
        public String Visit(FunDef node){
            Console.WriteLine(node.GetType());
            var functionName =  node.AnchorToken.Lexeme;
            insideFunction =true;
            tempTable = new SymbolTable();
            param = new FunctionTable();
            int i = 0;
            var locals = new StringBuilder();
            var result = new StringBuilder();
            var intTimes = new StringBuilder();
            if(node[0].GetType()==typeof(IdList)){
                foreach (var n in node[0]){
                    var variableName = n.AnchorToken.Lexeme;
                    param[variableName] = i;
                    intTimes.Append("int32,");
                    locals.Append(".locals init (int32 '" + variableName + "')\n");
                    i++;
                    tempTable.Add(variableName);
                }
            }else{
                locals.Append(VisitChildren(node[0]));
            }
            
            result.Append(".method public static int32 '"+functionName+"' ("+intTimes.ToString().TrimEnd(',') +"){\n");
            if(functionName == "main")
                result.Append(".entrypoint\n");
            result.Append(locals.ToString());
            bool isParamsNode = false;
            foreach (var n in node){
                if(!isParamsNode){
                    isParamsNode = true;
                }else{
                    result.Append(Visit((dynamic)n));
                }
            }
            result.Append("ldc.i4.0\nret\n}\n\n");
            insideFunction = false;
            return result.ToString();
        }
        public String Visit(IdList node){
            Console.WriteLine(node.GetType());
            return VisitChildren((dynamic)node);
        }
        public String Visit(Identifier node){
            Console.WriteLine(node.GetType());
            var variableName = node.AnchorToken.Lexeme;
            if(param.Contains(variableName)){
                return "ldarg."
                        + param[variableName]
                        +"\n";
            }
            else if(tempTable.Contains(variableName)){
                return "ldloc '"
                        + variableName 
                        + "'\n";   
            }
            else{
                return "ldsfld int32 'DeepLingoProgram'::'"
                        + variableName
                        +"'\n"; 
            }
        }
        public String Visit(StmtList node){
            Console.WriteLine(node.GetType());
            var sb = new StringBuilder();
            foreach (var n in node){
                var functionName = n.AnchorToken.Lexeme;
                if(n.GetType()== typeof(FunCall)&& !systemFunctions.Contains(functionName)){
                    var intTimes = new StringBuilder();
                    foreach (var n2 in n[0]){
                        intTimes.Append("int32,");
                        sb.Append(Visit((dynamic)n2));
                    }
                    sb.Append("call int32 class 'DeepLingoProgram'::'"+functionName+"'("+intTimes.ToString().TrimEnd(',')+")\n");
                    sb.Append("pop\n");
                }else{
                    sb.Append(Visit((dynamic)n));
                }
            }
            return sb.ToString();
        }
        public String Visit(If node){
            Console.WriteLine(node.GetType());
            var elseStmts = GenerateLabel();
            var oldEndIfLabel = endIfLabel;
            endIfLabel = GenerateLabel();
            var cont = 0;
            var result = Visit((dynamic)node[0])
                + "ldc.i4 42\n"
                + "bne.un '"+elseStmts+"'\n"
                + Visit((dynamic)node[1])
                + "br "+endIfLabel+"\n"
                + "'"+elseStmts+"':\n";
            foreach (var n in node){
                if(cont>=2){
                    result += Visit((dynamic)n);
                }else{
                    cont++;
                }
            }
            result += "'"+endIfLabel+"':\n";
            endIfLabel = oldEndIfLabel;
            return result;
        }
        public String Visit(Else node){
            Console.WriteLine(node.GetType());
            return VisitChildren((dynamic)node);
        }
        public String Visit(ElseIf node){
            Console.WriteLine(node.GetType());
            var label = GenerateLabel();
            return
            Visit(((dynamic)node[0]))
            + "ldc.i4 42\n"
            + "bne.un '" + label + "'\n"
            + Visit(((dynamic)node[1]))
            + "'" + label + "':\n";
        }
        public String Visit(ElseIfList node){
            Console.WriteLine(node.GetType());
            return VisitChildren((dynamic)node);
        }
        public String Visit(Assignment node){
            Console.WriteLine(node.GetType());
            var variableName = node.AnchorToken.Lexeme;
            var temp = "";
            if (param.Contains(variableName)){
                temp = "starg.s " + param[variableName] + "\n";
            }
            else if (tempTable.Contains(variableName)){
                temp = "stloc '" + variableName + "'\n";
            }
            else{
                temp = "stsfld int32 'DeepLingoProgram'::'" + variableName + "'\n";
            }
            return VisitChildren((dynamic)node) + temp;

        }
        public String Visit(VarChar node){
            Console.WriteLine(node.GetType());
            var character = node.AnchorToken.Lexeme;
            if (character.Length > 3){
                if (encodings.ContainsKey(character.Substring(1, 2))){
                    return "ldc.i4.s " + encodings[character.Substring(1, 2)] + "\n";
                }
                else if (character.Substring(1, 2) == @"\u"){
                    int codePoint = (int)Convert.ToInt64(character.Substring(3, 6), 16);
                    if (codePoint <= 8){
                        return "ldc.i4." + codePoint + "\n";
                    }
                    else if (codePoint <= 127){
                        return "ldc.i4.s " + codePoint + "\n";
                    }
                    else{
                        return "ldc.i4 " + codePoint + "\n";
                    }
                }
            }
            return "ldc.i4.s " + (int)node.AnchorToken.Lexeme[1] + "\n";
        }
        public String Visit(VarString node){
            Console.WriteLine(node.GetType());
            var str = node.AnchorToken.Lexeme;
            var size = str.Length;
            var sb = new StringBuilder();
            for(var i = 1;i<size-1;i++){
                var charValue = (int)str[i];
                if(encodings.ContainsKey(str.Substring(i,2)) && i+1<size-1){
                    charValue = encodings[str.Substring(i,2)];
                    i++;
                }else if(str.Substring(i, 2) == @"\u" && i+7<size-1){
                    charValue = (int)Convert.ToInt64(str.Substring(i + 2, 6), 16);
                    i += 7;
                }
                sb.Append(  "dup\n"
                            + "ldc.i4 " + charValue + "\n"
                            + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Add'(int32,int32)\n"
                            + "pop\n");
            }
            return "ldc.i4.0\n"
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'New'(int32)\n"
                    + sb.ToString();
        }
        public String Visit(VarInt node){
            Console.WriteLine(node.GetType());
            var intValue = Convert.ToInt32(node.AnchorToken.Lexeme);
            if (intValue <= 8){
                return "\t\tldc.i4."
                    + intValue
                    + "\n";
            }
            else if (intValue <= 127){
                return "\t\tldc.i4.s "
                    + intValue
                    + "\n";
            }
            else{
                return "\t\tldc.i4 "
                    + intValue
                    + "\n";
            }
        }
        public String Visit(Array node){
            Console.WriteLine(node.GetType());
            var sb = new StringBuilder();
            foreach (var n in node[0]){
                sb.Append("dup\n"
                + Visit((dynamic)n)
                + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Add'(int32,int32)\n"
                + "pop\n");
            }
            return  "ldc.i4.0\n"
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'New'(int32)\n"
                    + sb.ToString();
        }
        public String Visit(Loop node){
            Console.WriteLine(node.GetType());
            oldLoop = curLoop;
            var newLoop = GenerateLabel();
            curLoop = GenerateLabel();
            var result = newLoop
                        + ":\n"
                        + VisitChildren(node)
                        + "br "
                        + newLoop
                        + "\n'"
                        + curLoop
                        + "':\n";
            curLoop = oldLoop;
            return result;          
        }
        public String Visit(FunCall node){
            Console.WriteLine(node.GetType());
            switch (node.AnchorToken.Lexeme){
                case "printc":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Printc'(int32)\n"
                    + "pop\n";
                case "get":
                return VisitChildren(node) 
                + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Get'(int32,int32)\n";
                case "size":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Size'(int32)\n";
                case "prints":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Prints'(int32)\n" 
                    + "pop\n";
                case "pow":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Pow'(int32,int32)\n"  ;
                case "println":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Println'()\n"
                    + "pop\n";  
                case "reads":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Reads'()\n";
                case "new":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'New'(int32)\n";
                
                case "add":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Add'(int32,int32)\n"
                    + "pop\n";
                case "printi":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Printi'(int32)\n"
                    + "pop\n";
                case "readi":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Readi'()\n";
                case "set":
                    return VisitChildren(node) 
                    + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Set'(int32,int32,int32)\n"
                    + "pop\n"   ;
                
                default:
                    var intTimes = new StringBuilder();
                    var result = new StringBuilder();
                    foreach(var n in node[0]){
                        intTimes.Append("int32,");
                        result.Append(Visit((dynamic) n));
                    }
                    
                    return  result.ToString()
                            + "call int32 class 'DeepLingoProgram'::'" + node.AnchorToken.Lexeme + "'("+ intTimes.ToString().TrimEnd(',')+")\n";
            }
        }
        public String Visit(Break node){
            Console.WriteLine(node.GetType());
            return "br " + curLoop + "\n";
        }
        public String Visit(Increment node){
            Console.WriteLine(node.GetType());
            var variableName = node.AnchorToken.Lexeme;
            return
            "ldloc '" + variableName + "'\n" +
            "ldc.i4.1\n" +
            "add.ovf\n" +
            "stloc '" + variableName + "'\n";
        }
        public String Visit(Decrement node){
            Console.WriteLine(node.GetType());
            var variableName = node.AnchorToken.Lexeme;
            return
            "ldloc '" + variableName + "'\n" +
            "ldc.i4.1\n" +
            "sub.ovf\n" +
            "stloc '" + variableName + "'\n";
        }
        public String Visit(Return node){
            Console.WriteLine(node.GetType());
            return VisitChildren(node) + "ret\n";
        }
        public String Visit(Or node){
            Console.WriteLine(node.GetType());
            var result = new StringBuilder();
            var trueCond = GenerateLabel();
            var endCond = GenerateLabel();
            foreach(var n in node){
                result.Append(Visit((dynamic) n)
                                + "ldc.i4.0\n"
                                + "bne.un '"+trueCond+"'\n");
            }
            return  result.ToString()
                    + "ldc.i4.0\n"
                    + "br "+endCond+"\n"
                    + trueCond + ":\n"
                    + "ldc.i4 42\n"
                    + endCond + ":\n";
        }
        public String Visit(And node){
            Console.WriteLine(node.GetType());
            var result = new StringBuilder();
            var label = GenerateLabel();
            var label2 = GenerateLabel();
            foreach(var n in node){
                result.Append(Visit((dynamic) n)
                                + "ldc.i4 42\n"
                                + "bne.un '"+label+"'\n");
            }
            return result.ToString()
                        + "ldc.i4 42\n"
                        + "br "+label2+"\n"
                        + label + ":\n"
                        + "ldc.i4.0 \n"
                        + label2 + ":\n";
        }
        public String Visit(ExpressionComparison node){
            Console.WriteLine(node.GetType());
            var label = GenerateLabel();
            switch (node.AnchorToken.Category){
                case TokenType.GT:
                     return "ldc.i4.0\n"
                            + VisitChildren(node)
                            + "ble '"+label+"'\n"
                            + "pop\n"
                            + "ldc.i4 42\n"
                            + label + ":\n"; 
                case TokenType.LOET:
                    return  "ldc.i4 42\n"
                            + VisitChildren(node)
                            + "ble '"+label+"'\n"
                            + "pop\n"
                            + "ldc.i4.0\n"
                            + label + ":\n"; 
                case TokenType.GOET:
                    return  "ldc.i4 42\n"
                            + VisitChildren(node)
                            + "bge '"+label+"'\n"
                            + "pop\n"
                            + "ldc.i4.0\n"
                            + label + ":\n"; 
                case TokenType.LT:
                    return  "ldc.i4.0\n"
                            + VisitChildren(node)
                            + "bge '"+label+"'\n"
                            + "pop\n"
                            + "ldc.i4 42\n"
                            + label + ":\n"; 
                default:
                    return "";
            }
        }
        public String Visit(ExpressionAdd node){
            Console.WriteLine(node.GetType());
            if(node.AnchorToken.Category == TokenType.SUM){
                return VisitChildren(node) + "add.ovf\n";
            }
            return VisitChildren(node) + "sub\n";
        }
        public String Visit(ExpressionMul node){
            Console.WriteLine(node.GetType());
            switch(node.AnchorToken.Category){
                case TokenType.MOD:
                    return VisitChildren(node) + "rem\n";
                case TokenType.MUL:
                    return VisitChildren(node) + "mul.ovf\n";
                case TokenType.DIV:
                    return VisitChildren(node) + "div\n";
                default:
                    return "";
            }
        }
        public String Visit(ExpressionEquality node){
            Console.WriteLine(node.GetType());
            var label = GenerateLabel();
            if(node.AnchorToken.Category == TokenType.EQUALS){
                return  "ldc.i4.0\n"
                        + VisitChildren(node)
                        + "bne.un '"+label+"'\n"
                        + "pop\n"
                        + "ldc.i4 42\n"
                        + label + ":\n";
            }
            return  "ldc.i4 42\n"
                    + VisitChildren(node)
                    + "bne.un '"+label+"'\n"
                    + "pop\n"
                    + "ldc.i4.0\n"
                    + label + ":\n";
        }
        public String Visit(ExpressionUnary node){
            Console.WriteLine(node.GetType());
            if(node.AnchorToken.Lexeme.Equals("!")){
                var label = GenerateLabel();
                return 
                    "ldc.i4.0\n"+
                    VisitChildren(node) + 
                    "ldc.i4 42\n"+
                    "beq '"+label+"'\n"+
                    "pop\n"+
                    "ldc.i4 42\n"+ 
                    "'"+label+"':\n";
            }
            return VisitChildren(node);
        }
        public String Visit(Stmt node){
            return Visit((dynamic)node[0]);
        }
    }
}